Algorithm MultipluMtrx and Print out
//input arguments: none
// output result : matrixR

1: double mA[SIZE][SIZE] = { {5.0, 4.0, 3.0, 2.0, 1.0},	//matrix A 값 입력
2: {6.0, 7.0, 8.0, 9.0, 10.0},
3: {11.0, 12.0, 13.0, 14.0, 15.0},
4: {16.0, 17.0, 18.0, 19.0, 20.0},
5: {21.0, 22.0, 23.0, 24.0, 25.0}
6: };
7: double mB[SIZE][SIZE] = { {1.0, 0.0, 0.0, 0.0, 0.0},	//matrix B 값 입력
8: {0.0, 1.0, 0.0, 0.0, 0.0},
9: {0.0, 0.0, 1.0, 0.0, 0.0},
10: {0.0, 0.0, 0.0, 1.0, 0.0},
11: {0.0, 0.0, 0.0, 0.0, 1.0}
12: };
13: double mR[SIZE][SIZE] = { 0.0, };	//mR 초기화
14: printMtrx(mA, SIZE);
15: printMtrx(mB, SIZE);
16: multiplyMtrx(mA, mB, mR, SIZE);
17: printMtrx(mR, SIZE);	//곱셈한 행렬 출력
18: end
19: void multiplyMtrx(double A[][SIZE], double B[][SIZE], double X[][SIZE], int size)	//행렬의 곱셈
20: {
21: for (int i = 0; i < size; i++)
22: {
23: 	for (int p = 0; p < size; p++)
24: 	{
25: 		for (int q = 0; q < size; q++)
26: 		{
27: 			X[i][p] += A[i][q] * B[q][p];
28: 		}
29:	}
30: }
31: }
32: void printMtrx(double mA[][SIZE], int size)	//행렬을 출력하는 함수
33: {
34: unsigned char a6 = 0xA6, a1 = 0xA1, a2 = 0xA2;
35: unsigned char a3 = 0xA3, a4 = 0xA4, a5 = 0xA5;
36: for (int i = 0; i < size; i++) {
37: 	for (int j = 0; j < size; j++)
38: 	{
39: 		if ((i == 0) && (j == 0))	//첫번째 행 출력에서 0xa6, 0xa3 출력
40:			printout(┌mA[i][j]);
41:		else if ((i == 0) && j == (size - 1))	//첫번째 행 마지막 출력에서 0xa6, 0xa4출력
42:			printout(mA[i][j]┐);
43:		else if ((i > 0) && (i < size - 1) && (j == 0))	//두번째 행 출력부터 마지막행 이전까지는 0xa6, 0xa2출력
44:			printout(│mA[i][j]);
45:		else if ((i > 0) && (i < size - 1) && (j == (size - 1)))
46:			printout(mA[i][j]│);
47:		else if ((i == (size - 1)) && (j == 0))
48:			printout(└mA[i][j]);	//행렬 마지막행 첫번째 열에서 0xa6, 0xa6출력
49:		else if ((i == (size - 1)) && (j == (size - 1)))
50:			printout(mA[i][j]┘);	//행렬 마지막행 마지막 열에서 0xa6, 0xa5출력
51:		else
52:			printout(mA[i][j]);	//각 행의 첫번째, 마지막 열이 아니면 일반 출력
53:	}
54: printout(\n);
55: }
56: }
